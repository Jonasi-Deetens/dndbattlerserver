// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  username   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  characters Character[]
}

model Campaign {
  id   String @id @default(uuid())
  name String
  npcs Npc[]
}

model Character {
  id                Int            @id @default(autoincrement())
  name              String
  age               Int
  size              String
  speed             Int
  raceId            Int
  classId           Int
  subraceId         Int?
  background        String
  alignment         String
  primaryGoal       String
  secondaryGoals    String[]
  personalQuest     String?
  relationships     Relationship[]
  backstory         String
  currentLocation   String
  skills            Skill[]
  languages         Language[]
  ideals            String[]
  bonds             String[]
  flaws             String[]
  fears             String[]
  savingThrows      String[]
  magicSavingThrows String[]
  advantages        String[]
  disadvantages     String[]
  resistances       String[]
  immunities        String[] // e.g., charm, fear
  obstacles         Obstacle[]
  internalConflicts String[]
  vices             String[]
  appearance        String
  personalityTraits String[]
  items             Item[]
  spells            Spell[]
  level             Int
  experience        Int
  health            Int
  stats             Json // Store HP, AC, etc. as JSON
  senses            Sense[]
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  race              Race           @relation(fields: [raceId], references: [id])
  class             Class          @relation(fields: [classId], references: [id])
  subrace           Subrace?       @relation(fields: [subraceId], references: [id])
  abilities         Ability[]
  memberships       Membership[]
}

model Npc {
  id                Int            @id @default(autoincrement())
  name              String
  age               Int
  size              String
  speed             Int
  raceId            Int
  classId           Int
  subraceId         Int?
  background        String
  alignment         String
  primaryGoal       String
  secondaryGoals    String[]
  personalQuest     String?
  relationships     Relationship[]
  organizations     Organization[]
  backstory         String
  currentLocation   String
  languages         Language[]
  ideals            String[]
  bonds             String[]
  flaws             String[]
  fears             String[]
  savingThrows      String[]
  advantages        String[]
  disadvantages     String[]
  resistances       String[]
  immunities        String[] // e.g., charm, fear
  obstacles         Obstacle[]
  internalConflicts String[]
  vices             String[]
  appearance        String
  personalityTraits String[]
  items             Item[]
  spells            Spell[]
  skills            Skill[]
  level             Int
  experienceReward  Int
  health            Int
  stats             Json // Store HP, AC, etc. as JSON
  senses            Sense[]
  race              Race           @relation(fields: [raceId], references: [id])
  class             Class          @relation(fields: [classId], references: [id])
  subrace           Subrace?       @relation(fields: [subraceId], references: [id])
  campaignId        String
  campaign          Campaign       @relation(fields: [campaignId], references: [id])
  abilities         Ability[]
  memberships       Membership[]
}

model Monster {
  id               Int          @id @default(autoincrement())
  name             String
  type             String // e.g., Goblin, Orc, Dragon
  description      String
  health           Int
  armorClass       Int
  challengeRating  Float
  experienceReward Int
  actions          String[] // List of actions it can take
  stats            Json // Store STR, DEX, etc. as JSON
  vulnerabilities  String[] // e.g., fire, ice
  resistances      String[] // e.g., poison, magic
  immunities       String[] // e.g., charm, fear
  senses           Sense[]
  languages        Language[]
  items            Item[]
  spells           Spell[]
  skills           Skill[]
  abilities        Ability[]
  memberships      Membership[]
}

model Class {
  id             Int         @id @default(autoincrement())
  name           String      @unique
  description    String
  hitDice        String // e.g., "1d10"
  primaryAbility String // e.g., "Strength"
  savingThrows   String[] // e.g., ["Strength", "Constitution"]
  proficiencies  String[] // e.g., ["Armor: All", "Weapons: All simple and martial weapons"]
  spellcasting   Boolean // Whether the class has spellcasting ability
  spellSlots     Json? // JSON for spell slots per level if applicable
  spells         Spell[]
  characters     Character[]
  npcs           Npc[]
}

enum School {
  ABJURATION
  CONJURATION
  DIVINATION
  ENCHANTMENT
  EVOCATION
  ILLUSION
  NECROMANCY
  TRANSMUTATION
  TRANSFIGURATION
}

enum Dice {
  D4
  D6
  D8
  D10
  D12
  D20
  D100
}

enum AbilityScore {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}

enum EffectType {
  BUFF
  DEBUFF
  HEALING
  DAMAGE
  CONTROL
  SUMMONING
  UTILITY
  PROTECTION
  MOVEMENT
  DETECTION
  TRANSFORMATION
  TRANSPORTATION
  RESTORATION
  INSTANT_DEATH
  COMMUNICATION
  ILLUSION
}

enum DamageType {
  ACID
  BLUDGEONING
  COLD
  FIRE
  FORCE
  LIGHTNING
  NECROTIC
  PIERCING
  POISON
  PSYCHIC
  RADIANT
  SLASHING
  THUNDER
  VARIES
}

model Spell {
  id                     Int           @id @default(autoincrement())
  name                   String        @unique
  spellLevel             Int
  castingTime            Int // In minutes (action = 0, bonus action = -1)
  range                  Int // In feet
  area                   Int // In feet
  school                 School
  components             String[]
  savingThrows           AbilityScore?
  description            String
  damageType             DamageType?
  effectType             EffectType
  maxSpaceBetweenTargets Int? // In feet, like acid splash, max 5 feet between 2 targeted monsters
  statChanges            Json? // Max hp and hp increase or AC by level e.g. for the aid spell
  rolls                  Json? // The amount of times we roll the dice per level
  rollsBySpellSlot       Json? // The amount of times we roll the dice per spell slot level
  duration               Int // In rounds or minutes
  spellEffects           SpellEffect[]
  concentration          Boolean
  ritual                 Boolean
  savingThrowBonusDice   Dice?
  attackBonusDice        Dice?
  bonusDamage            Int? // Rolls that are like 1d4 +1 (where the +1 is this bonus damage)
  boostedBySpellModifier Boolean? // For spells that have + spellcasting ability modifier
  rollByCharacterLevel   Boolean? // Indicates if the roll is based on character level
  rollBySpellSlot        Boolean? // Indicates if the roll is based on spell slot level
  race                   Race[]         
  class                  Class[]         
  subrace                Subrace[]    
  Character              Character[]  
  Npc                    Npc[]       
  Monster                Monster[]   
}

model SpellEffect {
  id         Int        @id @default(autoincrement())
  spellId    Int
  spell      Spell      @relation(fields: [spellId], references: [id])
  targetType String // e.g., 'Creature', 'Self', 'Area'
  effectType EffectType
  value      Json // Stores the effect's value, e.g., {"duration": 600, "condition": "Charmed"}
  @@unique([spellId, id])
}

model Relationship {
  id          Int       @id @default(autoincrement())
  description String
  characterId Int
  character   Character @relation(fields: [characterId], references: [id])
  npcId       Int?
  npc         Npc?      @relation(fields: [npcId], references: [id])
}

model Organization {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  leaderId    Int?
  leader      Npc?         @relation(fields: [leaderId], references: [id])
  Membership  Membership[]
}

model Membership {
  id             Int          @id @default(autoincrement())
  organizationId Int
  characterId    Int?
  npcId          Int?
  monsterId      Int?
  organization   Organization @relation(fields: [organizationId], references: [id])
  character      Character?   @relation(fields: [characterId], references: [id])
  npc            Npc?         @relation(fields: [npcId], references: [id])
  monster        Monster?     @relation(fields: [monsterId], references: [id])
}

model Ability {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  characters Character[]
  npcs       Npc[]
  monsters   Monster[]
}

model Language {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  characters Character[]
  npcs       Npc[]
  monsters   Monster[]
  races      Race[]
  subraces   Subrace[]
}

model Skill {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  characters  Character[]
  npcs        Npc[]
  monsters    Monster[]
  races       Race[]
  subraces    Subrace[]
}

model Obstacle {
  id          Int        @id @default(autoincrement())
  description String
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  npcId       Int?
  npc         Npc?       @relation(fields: [npcId], references: [id])
}

model Sense {
  id          Int         @id @default(autoincrement())
  name        String      @unique // e.g., "Darkvision", "Tremorsense"
  description String
  range       Int // Range in feet, if applicable
  characters  Character[]
  npcs        Npc[]
  monsters    Monster[]
  races       Race[]
  subraces    Subrace[]
}

model Item {
  id         Int         @id @default(autoincrement())
  name       String
  type       String // e.g., "Armor", "Adventuring Gear", "Weapon"
  weight     Float // Weight in pounds
  cost       String // e.g., "10 gp"
  attributes Json // Additional attributes stored as JSON, e.g., {"AC": 14, "Stealth": "Disadvantage"}
  characters Character[]
  npcs       Npc[]
  monsters   Monster[]
}

model Race {
  id                    Int            @id @default(autoincrement())
  name                  String         @unique
  abilityScoreIncreases Json // JSON object to store ability score increases, e.g., { "STR": 1, "DEX": 2 }
  statIncreases         Json // JSON object to store stat score increases, e.g., { "HP": 1 }
  adultAge              Int
  maxAge                Int
  alignment             String // Typical alignments
  size                  String // Size category (e.g., Medium, Small)
  speed                 Int // Base walking speed in feet
  languages             Language[]
  proficiencies         String[] // E.g. 'light weapon', 'shield'
  resistances           String[] // E.g. 'poison', 'fire'
  advantages            String[] // E.g. 'poison' -- This is for saving throws
  raceDislikes          String[] // E.g. 'poison' -- This is for saving throws
  senses                Sense[]
  subraces              Subrace[] // Subraces associated with this race
  magicSavingThrows     AbilityScore[]
  spells                Spell[]
  skills                Skill[]
  characters            Character[]
  npcs                  Npc[]
}

model Subrace {
  id                    Int         @id @default(autoincrement())
  name                  String
  parentRaceId          Int
  parentRace            Race        @relation(fields: [parentRaceId], references: [id])
  abilityScoreIncreases Json // JSON object to store ability score increases, e.g., { "STR": 1, "DEX": 2 }
  statIncreases         Json? // JSON object to store stat score increases, e.g., { "HP": 1 }
  adultAge              Int
  maxAge                Int
  alignment             String // Typical alignments
  size                  String // Size category (e.g., Medium, Small)
  speed                 Int // Base walking speed in feet
  languages             Language[]
  spells                Spell[]
  skills                Skill[]
  senses                Sense[]
  proficiencies         String[] // E.g. 'light weapon', 'shield'
  resistances           String[] // E.g. 'poison', 'fire'
  advantages            String[] // E.g. 'poison' -- This is for saving throws
  disadvantages         String[] // E.g. 'poison' -- This is for saving throws
  characters            Character[]
  npcs                  Npc[]
}
