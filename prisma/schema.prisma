// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  username   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  characters Character[]
}

model Campaign {
  id   String @id @default(uuid())
  name String
  fields Field[]
  npcs Npc[]
}

model Character {
  id                Int            @id @default(autoincrement())
  name              String
  age               Int
  size              String
  speed             Int
  raceId            Int
  classId           Int
  subraceId         Int?
  subclassId        Int?
  gender            String
  background        String?
  alignment         String
  primaryGoal       String
  secondaryGoals    String[]
  personalQuest     String?
  relationships     Relationship[]
  proficiencies     String[]
  proficiencyBonus  Int
  spellSlots        Int[]
  primaryAbilityScoreModifier  String?
  primarySpellAbilityScoreModifier  String?
  exhaustionLevel   Int
  numberOfRages     Int
  rageDamage        Int
  kiPoints          Int
  sorceryPoints     Int
  invocationsKnown  Int
  sneakAttack       String
  cantripsKnown     Int
  spellsKnown       Int
  fightingStyles    String[]
  backstory         String?
  currentLocation   String
  skills            Skill[]
  languages         Language[]
  ideals            String[]
  bonds             String[]
  flaws             String[]
  fears             String[]
  savingThrows      String[]
  magicSavingThrows String[]
  advantages        String[]
  disadvantages     String[]
  resistances       String[]
  immunities        String[] // e.g., charm, fear
  obstacles         Obstacle[]
  internalConflicts String[]
  vices             String[]
  appearance        String?
  personalityTraits String[]
  items             Item[]
  spells            Spell[]
  stats             Json // Store HP, AC, etc. as JSON
  senses            Sense[]
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  race              Race           @relation(fields: [raceId], references: [id])
  class             Class          @relation(fields: [classId], references: [id])
  subrace           Subrace?       @relation(fields: [subraceId], references: [id])
  subclass          Subclass?      @relation(fields: [subclassId], references: [id])
  abilities         Ability[]
  memberships       Membership[]
}

model Field {
  id              Int      @id @default(autoincrement())
  tileId          Int
  tile            Tile     @relation(fields: [tileId], references: [id])
  positionX       Int
  positionY       Int
  campaignId      String
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model Tile {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  tileTypeId      Int
  tileType        TileType @relation(fields: [tileTypeId], references: [id])
  imageUrl        String
  fields          Field[]
}

model TileType {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  isRoof          Boolean  @default(false)
  isFloor         Boolean  @default(true)
  isDestructible  Boolean  @default(false)
  passable        Boolean  @default(true)
  seeThrough      Boolean  @default(true)
  tiles           Tile[]
}

model Npc {
  id                Int            @id @default(autoincrement())
  name              String
  age               Int
  size              String
  speed             Int
  raceId            Int
  classId           Int
  subraceId         Int?
  background        String
  alignment         String
  primaryGoal       String
  secondaryGoals    String[]
  personalQuest     String?
  relationships     Relationship[]
  organizations     Organization[]
  proficiencies     String[]
  backstory         String
  currentLocation   String
  languages         Language[]
  ideals            String[]
  bonds             String[]
  flaws             String[]
  fears             String[]
  savingThrows      String[]
  advantages        String[]
  disadvantages     String[]
  resistances       String[]
  immunities        String[] // e.g., charm, fear
  obstacles         Obstacle[]
  internalConflicts String[]
  vices             String[]
  appearance        String
  personalityTraits String[]
  items             Item[]
  spells            Spell[]
  skills            Skill[]
  level             Int
  experienceReward  Int
  health            Int
  stats             Json // Store HP, AC, etc. as JSON
  senses            Sense[]
  race              Race           @relation(fields: [raceId], references: [id])
  class             Class          @relation(fields: [classId], references: [id])
  subrace           Subrace?       @relation(fields: [subraceId], references: [id])
  campaignId        String
  campaign          Campaign       @relation(fields: [campaignId], references: [id])
  abilities         Ability[]
  memberships       Membership[]
}

model Monster {
  id               Int          @id @default(autoincrement())
  name             String
  type             String // e.g., Goblin, Orc, Dragon
  description      String
  health           Int
  armorClass       Int
  challengeRating  Float
  experienceReward Int
  actions          String[] // List of actions it can take
  stats            Json // Store Strength, Dexterity, etc. as JSON
  vulnerabilities  String[] // e.g., fire, ice
  resistances      String[] // e.g., poison, magic
  immunities       String[] // e.g., charm, fear
  senses           Sense[]
  languages        Language[]
  items            Item[]
  spells           Spell[]
  skills           Skill[]
  abilities        Ability[]
  memberships      Membership[]
}

model Class {
  id                        Int      @id @default(autoincrement())
  name                      String   @unique
  description               String
  hitDice                   String
  proficiencies             String[]
  savingThrowProficiencies  String[]
  items                     Item[]
  proficiencyBonusByLevel   Json
  numberOfRagesByLevel      Json?
  abilitiesByLevel          Json
  buffsByLevel              Json
  primaryAbilityScoreModifier String?
  primarySpellAbilityScoreModifier String?
  subClasses                Subclass[]
  rageDamageByLevel         Json?
  spells                    Spell[]
  spellsByLevel             Json
  spellSlotsByLevel         Json
  skillsByLevel             Json
  subClassAvailableAtLevel  Int
  unusableItems             String[]
  fightingStyles            String[]
  movementSpeedBonusByLevel Json
  exhaustionLevel           Int
  kiPointsByLevel           Json
  sorceryPointsByLevel      Json
  sneakAttackByLevel        Json?
  invocationsKnownByLevel   Json
  cantripsKnownByLevel      Json  // JSON object mapping levels to amount of cantrips
  spellsKnownByLevel        Json  // JSON object mapping levels to amount of spells
  characters                Character[]
  npcs                      Npc[]
}

model Subclass {
  id                        Int      @id @default(autoincrement())
  name                      String   @unique
  description               String
  proficiencies             String[] // List of proficiencies granted by the subclass
  primarySpellAbilityScoreModifier String?
  savingThrowProficiencies  String[] // List of saving throw proficiencies
  spells                    Spell[]  // List of spells available to the subclass
  spellsByLevel             Json     // JSON object mapping levels to available spells
  skillsByLevel             Json     // JSON object mapping levels to granted skills
  abilitiesByLevel          Json     // JSON object mapping levels to granted abilities
  spellslotsBySpellLevelByLevel Json?  // JSON object mapping levels to amount of spell slots per spell level
  cantripsKnownByLevel      Json?  // JSON object mapping levels to amount of cantrips
  spellsKnownByLevel        Json?  // JSON object mapping levels to amount of spells
  parentClassId             Int
  parentClass               Class     @relation(fields: [parentClassId], references: [id])
  characters                Character[]
}

model Spell {
  id                     Int           @id @default(autoincrement())
  name                   String        @unique
  spellLevel             Int
  castingTime            Int // In minutes (action = 0, bonus action = -1)
  range                  Int // In feet
  area                   Int // In feet
  school                 String
  components             String[]
  savingThrows           String?
  description            String
  damageType             String?
  effectType             String
  maxSpaceBetweenTargets Int? // In feet, like acid splash, max 5 feet between 2 targeted monsters
  statChanges            Json? // Max hp and hp increase or AC by level e.g. for the aid spell
  rolls                  Json? // The amount of times we roll the dice per level
  rollsBySpellSlot       Json? // The amount of times we roll the dice per spell slot level
  duration               Int // In rounds or minutes
  spellEffects           SpellEffect[]
  concentration          Boolean
  ritual                 Boolean
  savingThrowBonusDice   String?
  attackBonusDice        String?
  bonusDamage            Int? // Rolls that are like 1d4 +1 (where the +1 is this bonus damage)
  boostedBySpellModifier Boolean? // For spells that have + spellcasting ability modifier
  rollByCharacterLevel   Boolean? // Indicates if the roll is based on character level
  rollBySpellSlot        Boolean? // Indicates if the roll is based on spell slot level
  race                   Race[]
  class                  Class[]
  subClasses             Subclass[]
  subrace                Subrace[]
  Character              Character[]
  Npc                    Npc[]
  Monster                Monster[]
}

model SpellEffect {
  id         Int        @id @default(autoincrement())
  spellId    Int
  spell      Spell      @relation(fields: [spellId], references: [id])
  targetType String // e.g., 'Creature', 'Self', 'Area'
  effectType String
  value      Json // Stores the effect's value, e.g., {"duration": 600, "condition": "Charmed"}
  @@unique([spellId, id])
}

model Relationship {
  id          Int       @id @default(autoincrement())
  description String
  characterId Int
  character   Character @relation(fields: [characterId], references: [id])
  npcId       Int?
  npc         Npc?      @relation(fields: [npcId], references: [id])
}

model Organization {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  leaderId    Int?
  leader      Npc?         @relation(fields: [leaderId], references: [id])
  Membership  Membership[]
}

model Membership {
  id             Int          @id @default(autoincrement())
  organizationId Int
  characterId    Int?
  npcId          Int?
  monsterId      Int?
  organization   Organization @relation(fields: [organizationId], references: [id])
  character      Character?   @relation(fields: [characterId], references: [id])
  npc            Npc?         @relation(fields: [npcId], references: [id])
  monster        Monster?     @relation(fields: [monsterId], references: [id])
}

model Ability {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  damage      String?  // Nullable field to store damage information if applicable
  buffs       String?  // Nullable field to store buffs or additional effects if applicable
  duration    String?  // Nullable field to store the duration of the ability
  range       String?  // Nullable field to store the range of the ability
  actionType  String?
  characters  Character[]
  npcs        Npc[]
  monsters    Monster[]
}

model Language {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  characters Character[]
  npcs       Npc[]
  monsters   Monster[]
  races      Race[]
  subraces   Subrace[]
}

model Skill {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  characters  Character[]
  npcs        Npc[]
  monsters    Monster[]
  races       Race[]
  subraces    Subrace[]
}

model Obstacle {
  id          Int        @id @default(autoincrement())
  description String
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  npcId       Int?
  npc         Npc?       @relation(fields: [npcId], references: [id])
}

model Sense {
  id          Int         @id @default(autoincrement())
  name        String      @unique // e.g., "Darkvision", "Tremorsense"
  description String
  range       Int // Range in feet, if applicable
  characters  Character[]
  npcs        Npc[]
  monsters    Monster[]
  races       Race[]
  subraces    Subrace[]
}

model Item {
  id         Int         @id @default(autoincrement())
  name       String
  type       String // e.g., "Armor", "Adventuring Gear", "Weapon"
  rangeType  String?
  weight     Float // Weight in pounds
  cost       String // e.g., "10 gp"
  attributes Json // Additional attributes stored as JSON, e.g., {"AC": 14, "Stealth": "Disadvantage"}
  characters Character[]
  npcs       Npc[]
  monsters   Monster[]
  classes    Class[]
}

model Race {
  id                    Int            @id @default(autoincrement())
  name                  String         @unique
  description           String
  abilityScoreIncreases Json // JSON object to store ability score increases, e.g., { "Strength": 1, "Dexterity": 2 }
  statIncreases         Json // JSON object to store stat score increases, e.g., { "HP": 1 }
  adultAge              Int
  maxAge                Int
  alignment             String // Typical alignments
  size                  String // Size category (e.g., Medium, Small)
  speed                 Int // Base walking speed in feet
  languages             Language[]
  proficiencies         String[] // E.g. 'light weapon', 'shield'
  resistances           String[] // E.g. 'poison', 'fire'
  advantages            String[] // E.g. 'poison' -- This is for saving throws
  raceDislikes          String[] // E.g. 'poison' -- This is for saving throws
  senses                Sense[]
  subraces              Subrace[] // Subraces associated with this race
  magicSavingThrows     String[]
  spells                Spell[]
  skills                Skill[]
  characters            Character[]
  npcs                  Npc[]
}

model Subrace {
  id                    Int         @id @default(autoincrement())
  name                  String
  description           String
  parentRaceId          Int
  parentRace            Race        @relation(fields: [parentRaceId], references: [id])
  abilityScoreIncreases Json // JSON object to store ability score increases, e.g., { "Strength": 1, "Dexterity": 2 }
  statIncreases         Json? // JSON object to store stat score increases, e.g., { "HP": 1 }
  adultAge              Int
  maxAge                Int
  alignment             String // Typical alignments
  size                  String // Size category (e.g., Medium, Small)
  speed                 Int // Base walking speed in feet
  languages             Language[]
  spells                Spell[]
  skills                Skill[]
  senses                Sense[]
  proficiencies         String[] // E.g. 'light weapon', 'shield'
  resistances           String[] // E.g. 'poison', 'fire'
  advantages            String[] // E.g. 'poison' -- This is for saving throws
  disadvantages         String[] // E.g. 'poison' -- This is for saving throws
  characters            Character[]
  npcs                  Npc[]
}
